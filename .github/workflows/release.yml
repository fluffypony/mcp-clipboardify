name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  id-token: write

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Setup clipboard dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y xclip xsel xvfb
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run tests
      env:
        DISPLAY: ${{ matrix.os == 'ubuntu-latest' && ':99' || '' }}
        MCP_LOG_LEVEL: DEBUG
      run: |
        poetry run pytest tests/ -v --tb=short

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Update version in pyproject.toml
      run: |
        poetry version ${{ steps.version.outputs.version }}

    - name: Update version in __init__.py
      run: |
        sed -i 's/__version__ = ".*"/__version__ = "${{ steps.version.outputs.version }}"/' src/mcp_clipboard_server/__init__.py

    - name: Build package
      run: |
        poetry build
        
        # Verify package contents
        tar -tzf dist/mcp_clipboard_server-*.tar.gz | head -20
        python -m zipfile -l dist/mcp_clipboard_server-*.whl | head -20

    - name: Store build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Verify package installation
      run: |
        pip install dist/*.whl
        mcp-clipboard-server --help
        python -m mcp_clipboard_server --help

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    environment: test-pypi
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Publish to TestPyPI
      env:
        POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry config pypi-token.testpypi $POETRY_PYPI_TOKEN_TESTPYPI
        poetry publish --repository testpypi --skip-existing

    - name: Wait for TestPyPI propagation
      run: sleep 30

    - name: Test installation from TestPyPI
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ mcp-clipboard-server==${{ needs.build.outputs.version }}
        mcp-clipboard-server --help

  publish-prod:
    needs: [test, build, publish-test]
    runs-on: ubuntu-latest
    environment: pypi
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Publish to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        poetry config pypi-token.pypi $POETRY_PYPI_TOKEN_PYPI
        poetry publish

    - name: Wait for PyPI propagation
      run: sleep 60

    - name: Test installation from PyPI
      run: |
        pip install mcp-clipboard-server==${{ needs.build.outputs.version }}
        mcp-clipboard-server --help

  create-release:
    needs: [test, build, publish-prod]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog section for this version
        if [ -f CHANGELOG.md ]; then
          # Try to extract the section for this version
          CHANGELOG=$(awk "/^## \[?v?${{ steps.version.outputs.version }}\]?/{flag=1; next} /^## /{flag=0} flag" CHANGELOG.md)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="Release ${{ steps.version.outputs.version }}"
          fi
        else
          CHANGELOG="Release ${{ steps.version.outputs.version }}

This release includes cross-platform clipboard functionality with enhanced error handling and platform-specific guidance.

## Features
- Cross-platform clipboard operations (Windows, macOS, Linux)
- Enhanced error handling with platform-specific guidance
- Comprehensive test coverage across platforms
- Production-ready PyPI package"
        fi
        
        # Save changelog to output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/mcp_clipboard_server-${{ steps.version.outputs.version }}-py3-none-any.whl
        asset_name: mcp_clipboard_server-${{ steps.version.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip

    - name: Upload Source Distribution
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/mcp_clipboard_server-${{ steps.version.outputs.version }}.tar.gz
        asset_name: mcp_clipboard_server-${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip
